import pandas as pd
from pymongo import MongoClient
from app.config.config import MODEL_PATH, MONGODB_URI
from app.models.cancel_prediction.train_model import train_and_save_model as actual_model_trainer
import logging
client = MongoClient(MONGODB_URI)
db = client["themeal"]
collection = db["order_prediction_log"]


def get_latest_bookings(limit=10):
    """
    L·∫•y c√°c b·∫£n ghi ƒë·∫∑t b√†n m·ªõi nh·∫•t t·ª´ MongoDB ƒë·ªÉ hu·∫•n luy·ªán,
    ch·ªâ l·∫•y nh·ªØng b·∫£n ghi ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán (used_in_training != True).
    """
    logging.info("Getting data...")
    query = {
        "$or": [
            {"used_in_training": {"$exists": False}},  # ch∆∞a c√≥ field n√†y
            {"used_in_training": {"$ne": True}}        # c√≥ field nh∆∞ng kh√¥ng ph·∫£i True
        ]
    }
    logging.info("(Getting data23...")
    cursor = collection.find(query).sort("booking_time", -1).limit(limit)
    logging.info("(Getting data45...")
    df = pd.DataFrame(list(cursor))
    logging.info("(Getting data67...")
    if "_id" in df.columns:
        df.drop(columns=["_id"], inplace=True)
    logging.info(f"Retrieved {len(df)} rows from MongoDB.")
    return df



def train_and_save_model(df):
    """
    G·ªçi h√†m hu·∫•n luy·ªán m√¥ h√¨nh v√† ghi l·∫°i d·ªØ li·ªáu ƒë√£ s·ª≠ d·ª•ng.
    """
    # üß† G·ªçi hu·∫•n luy·ªán m√¥ h√¨nh (v√≠ d·ª• d√πng sklearn b√™n trong)
    actual_model_trainer(df)

    # üì¶ ƒê√°nh d·∫•u c√°c b·∫£n ghi ƒë√£ d√πng ƒë·ªÉ train
    used_for_training = df.to_dict(orient="records")
    for doc in used_for_training:
        doc["used_in_training"] = True
        collection.update_one(
            {"orderId": doc["orderId"]},
            {"$set": doc},
            upsert=True
        )


def retrain_if_enough_data(batch_size=10):
    """
    Ki·ªÉm tra n·∫øu ƒë·ªß d·ªØ li·ªáu th√¨ hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh.
    """
    df = get_latest_bookings(limit=batch_size)
    if len(df) >= batch_size:
        logging.info(f"[üß†] Enough data ({len(df)}). Retraining model...")
        train_and_save_model(df)
        logging.info(f"[‚úÖ] Model retrained and saved to {MODEL_PATH}")
    else:
        logging.info(f"[‚è≥] Not enough data to retrain (have {len(df)} / {batch_size})")
