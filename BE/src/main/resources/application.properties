spring.application.name=curcus
spring.jackson.time-zone=UTC
spring.datasource.url=jdbc:postgresql://localhost:5432/curcus
spring.datasource.username=postgres
spring.datasource.password=Ngocquynguyen1
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
server.tomcat.connection-timeout=180s
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# Additional configuration (optional)
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
logging.level.org.springframework.security.web.authentication.session.SessionAuthenticationFilter=DEBUG
logging.level.org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter=DEBUG
#named lowercase column in database
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#updaload file
spring.servlet.multipart.enabled=true
##
spring.output.ansi.enabled=ALWAYS
# security.enabled=true
#session
# Session Configuration
server.servlet.session.timeout=30m
#server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax
server.servlet.session.cookie.secure=false
#cors
spring.mvc.cors.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
#elasticsearch
spring.elasticsearch.uris=http://elasticsearch:9200
# Elasticsearch Configuration
elasticsearch.host=${ELASTICSEARCH_HOST:elasticsearch}
elasticsearch.port=${ELASTICSEARCH_PORT:9200}
spring.elasticsearch.connection-timeout=5s
spring.elasticsearch.socket-timeout=3s
spring.elasticsearch.restclient.sniffer.delay-after-failure=1s
logging.level.org.springframework.data.elasticsearch=DEBUG
## kafka
# spring.data.elasticsearch.cluster-name=docker-cluster
# spring.data.elasticsearch.cluster-nodes=localhost:9200
# spring.kafka.bootstrap-servers=kafka:9092
# spring.kafka.consumer.group-id=elasticsearch-group
# spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP:localhost:9092}
###PayOS
client.id=c52168d1-0b63-47b4-ab92-09a6138f05b5
apiKey=265ad092-714c-4684-982f-7906eea50584
checksumKey=bdc07e1452e175a62a5f439e1640faf1103e2188545d16050dab43c73f65a070
###AWS
aws.region=ap-southeast-1
# aws.accessKeyId=${AWS_ACCESS_KEY_ID}
# aws.secretKey=${AWS_SECRET_ACCESS_KEY}
# aws.s3.bucket=themealbucket1
###google
spring.security.oauth2.client.registration.google.client-id=142229183760-20ifo7r71hsn1sdbs8r86n4i61qitm4g.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/callbackOauth2Google
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.user-name-attribute=sub
#server.servlet.session.cookie.name=APPSESSIONID
logging.level.org.springframework.security=DEBUG
aws.accessKeyId=AKIAZQ3DRSY6R5R5KKUR
aws.secretKey=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
aws.s3.bucket=themealbucket1
##MongoDB
kafka.topic.booking-request-events=booking-request-events


