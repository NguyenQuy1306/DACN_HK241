spring.config.import=optional:file:.env
spring.jackson.time-zone=UTC
spring.datasource.url=jdbc:postgresql://${DB_HOST:159.223.43.202}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
server.tomcat.connection-timeout=180s
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Additional configuration (optional)
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
logging.level.org.springframework.security.web.authentication.session.SessionAuthenticationFilter=DEBUG
logging.level.org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter=DEBUG
#named lowercase column in database
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#updaload file
spring.servlet.multipart.enabled=true
spring.output.ansi.enabled=ALWAYS
# security.enabled=true
#session
server.servlet.session.timeout=30m
#server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax
server.servlet.session.cookie.secure=false
#cors
url.client=${URL_CLIENT}
url.server.app=${URL_SERVER_APP}
spring.mvc.cors.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
# Elasticsearch
elasticsearch.host=${ELASTICSEARCH_HOST}
elasticsearch.port=${ELASTICSEARCH_PORT}
spring.elasticsearch.connection-timeout=5s
spring.elasticsearch.socket-timeout=3s
spring.elasticsearch.restclient.sniffer.delay-after-failure=1s
logging.level.org.springframework.data.elasticsearch=DEBUG
# kafka
# spring.data.elasticsearch.cluster-name=docker-cluster
# spring.data.elasticsearch.cluster-nodes=localhost:9200
# spring.kafka.consumer.group-id=elasticsearch-group
# spring.kafka.consumer.auto-offset-reset=earliest
kafka.group.id=${KAFKA_GROUP_ID}
kafka.mongodb.group.id=${KAFKA_MONGODB_GROUP_ID}
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP}
kafka.elasticsearch.topic=${KAFKA_ELASTICSEARCH_TOPIC}
#PayOS
client.id=${CLIENT_ID}
apiKey=${API_KEY}
checksumKey=${CHECK_SUM_KEY}
#AWS
aws.region=#{AWS_REGION}
aws.accessKeyId=${AWS_ACCESS_KEY_ID}
aws.secretKey=${AWS_SECRET_ACCESS_KEY}
aws.s3.bucket=${AWS_S3_BUCKET}
#google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE}

#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/callbackOauth2Google
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.user-name-attribute=sub
#server.servlet.session.cookie.name=APPSESSIONID
logging.level.org.springframework.security=DEBUG
#MongoDB
kafka.topic.predict-request-events=${KAFKA_TOPIC_PREDICT_REQUEST_EVENTS}
kafka.topic.training-request-events=${KAFKA_TOPIC_TRAINING_REQUEST_EVENTS}
#Mailsender
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

